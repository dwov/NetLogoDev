; File with the "to-go"- functionality of citizen-agents

; FILE HISTORY:

; 2024-01-29 Initial template, gks
; 
;
;---------------------------------------------------


to citizen_behavior
  ; Directly call execute-intentions, which handles intention execution logic
  ;print (word "Citizen " who " current int.: " current-intention)
  execute-intentions
end


to walkaround
  ifelse inPrison? [
    ;nothing
  ]
  [
    forward speed
    let places neighborhood with [not any? cops-here and region != "prison"]
    if any? places [move-to one-of places]
    ; Example of adding an intention when a condition is met
    let nearby-police other cops in-radius citizen-vision
    ifelse any? nearby-police [
      add-intention "see-police" "true" ; The second arg is a condition to remove the intention
    ] [
      ;add-intention "walkaround" "false"
    ]
  ]
end


to see-police
  ; Let's say seeing a police triggers moving away from the nearest police
  let nearest-police min-one-of (other cops in-radius citizen-vision) [distance myself]
  if nearest-police != nobody [
    face nearest-police
    rt 180 ; Turn away from the police
    fd 1 ; Move one step away
    print (word "Citizen " who " avoids cop: " [who] of nearest-police)
    ; After the action, the citizen reassesses their intentions
    ; Here you might check conditions to remove this intention or add new ones
    ; For simplicity, we just pop this intention off
    ;pop-intention
    ; Alternatively, use remove-intention if conditions are met
  ]
end


to go-to-prison
   move-to one-of patches with [not any? turtles-here and region = "prison"]
   set color red
   set inPrison? true
   set jailtime jailtime + 1 ; Start or continue counting the time in prison
   print (word "citizen " who " is in prison since: " jailtime)
   
   ; Check if the citizen's jail time exceeds their sentence, implying release
   ifelse jailtime > jailsentence [
    ; Reset jail-related variables upon release
    set jailtime 0
    set jailsentence 0
    let places neighborhood with [not any? cops-here and region != "prison"]
    if any? places [move-to one-of places] ; Move the citizen out of prison
    set inPrison? false
    set color yellow ; Change color to indicate the citizen is no longer imprisoned
    print (word "citizen " who " is released from prison")
    ; Instead of setting next-task, add an intention to resume normal behavior
    ;add-intention "walkaround" "false"
   ][
    ;add-intention "go-to-prison" "true"
  ]
end
