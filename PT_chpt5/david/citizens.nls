; File with the "to-go"- functionality of citizen-agents

; FILE HISTORY:

; 2024-01-29 Initial template, gks
; 
;
;---------------------------------------------------


to citizen_behavior
  ; Directly call execute-intentions, which handles intention execution logic
  ;print (word "Citizen " who " current int.: " current-intention)
  ;execute-intentions
  
  update-beliefs
  if not arrived [
    add-intention "walkaround" "true"
  ]
  if (any? nearby-police) [
    add-intention "see-police" "true"
  ]
  if (going-to-prison) [
    add-intention "go-to-prison" "true"
  ]
  

  ifelse (empty? intentions) [
    proactive-behaviour
  ] [
    ;pop-intention
  ]
  
  execute-intentions
  set intentions []

end


to update-beliefs
  ; Update vision and so on.
  set nearby-police other cops in-radius citizen-vision

  ; Check if the turtle's current patch is the patch designated as its final destination.
  ifelse patch-here = final-destination
  [ set arrived true ]
  [ set arrived false ]
  print (word "region " patch-here)
end


to proactive-behaviour
  print (word "Citizen " who " proactive")
  if arrived [
    if final-destination = one-of patches with [region = "university"] [
      set final-destination one-of patches with [region = "expresso"]
    ]
    if final-destination = one-of patches with [region = "expresso"] [ ; The else ensures that it only switches to university if it's not currently university.
      set final-destination one-of patches with [region = "university"]
    ]
    set arrived false  ; Reset arrived status after changing destination.
    print (word "New final-destination: " final-destination) ; Debugging line to see the change.
  ]
end



to walkaround
  ifelse inPrison? [
    ;nothing
  ]
  [
    ifelse distance final-destination <= speed
    [ move-to final-destination ]
    [ 
    set heading towards final-destination
    forward speed * 0.8
    let places neighborhood with [not any? cops-here and region != "prison"]
    if any? places [move-to one-of places]
    ]
  ]
end


to see-police
  ; Let's say seeing a police triggers moving away from the nearest police
  let nearest-police min-one-of (other cops in-radius citizen-vision) [distance myself]
  if nearest-police != nobody [
    face nearest-police
    rt 180  ; Turn away from the police
    forward speed  ; Move one step away
    print (word "Citizen " who " avoids cop: " [who] of nearest-police)
  ]
end


to go-to-prison
   move-to one-of patches with [not any? turtles-here and region = "prison"]
   set color red
   set inPrison? true
   set jailtime jailtime + 1 ; Start or continue counting the time in prison
   print (word "citizen " who " is in prison since: " jailtime)
   
   ; Check if the citizen's jail time exceeds their sentence, implying release
   ifelse jailtime > jailsentence [
    ; Reset jail-related variables upon release
    set jailtime 0
    set jailsentence 0
    let places neighborhood with [not any? cops-here and region != "prison"]
    if any? places [move-to one-of places] ; Move the citizen out of prison
    set inPrison? false
    set color yellow ; Change color to indicate the citizen is no longer imprisoned
    print (word "citizen " who " is released from prison")
    ; Instead of setting next-task, add an intention to resume normal behavior
    ;add-intention "walkaround" "false"
    set going-to-prison false
   ][
    ;add-intention "go-to-prison" "true"
    
  ]
end
